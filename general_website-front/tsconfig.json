{
  "compilerOptions": {
    "baseUrl": ".", // 解析非相对模块的基地址，默认是当前目录
    "paths": {
      // 路径映射，相对于baseUrl
      "@": ["./src"],
      "@/*": ["./src/*"],
      "@components": ["./src/components"]
    },
    // "target": "es5",
    "target": "ESNext", // 目标语言的版本
    "module": "ESNext", // 生成代码的模板标准
    "moduleResolution": "node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    "esModuleInterop": true, // 允许export=导出，由import from 导入
    "allowJs": true, // 允许编译器编译JS，JSX文件
    "checkJs": true, // 允许在JS文件中报错，通常与allowJS一起使用
    "lib": ["DOM", "DOM.Iterable", "ESNext"], // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array"
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true, // 不输出文件,即编译后不会生成任何js文件
    "jsx": "react-jsx", // 开启所有严格的类型检查
    "types": ["node"], // 指定 jsx 格式
    "typeRoots": ["node_modules/@types", "types"]
  },
  "include": ["src"],
  // 解决 'JSON schema for the TypeScript compiler’s configuration file' 的问题
  "exclude": ["node_modules", "dist"]
}
